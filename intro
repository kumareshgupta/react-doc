React -
  a declarative, 
  efficient, and 
  flexible JavaScript library for building user interfaces.
  
   In React we mainly have two types of components
    1. functional
    2. class
  React creates a VIRTUAL DOM in memory.
    Instead of manipulating the browser's DOM directly, React creates a virtual DOM in memory, where it does all the necessary manipulating, before making the changes in the browser DOM.

Create-react-app
========================================================================================================================
npx :-
npx create-react-app <project-name>
npm package runner

npm:-
npm install create-react-app -g
create-react-app <project-name>

    
    ====================================Default Code in index.js=========================================================
    
import React from 'react';
import ReactDOM from 'react-dom';
import './index.css';
import App from './App';
import * as serviceWorker from './serviceWorker';

ReactDOM.render(<App />, document.getElementById('root'));

// If you want your app to work offline and load faster, you can change
// unregister() to register() below. Note this comes with some pitfalls.
// Learn more about service workers: https://bit.ly/CRA-PWA
serviceWorker.unregister();

===========================================================================

Event Handling in React
1. binding in render method
2. use arrow function in render method
3. binding the event handler in the constructor
4. use arrow function as a class property

============================================================================

When to us index as a key?
1. The items in your list do not have a unique id.
2. The list is static list and will not change.
3. The list will never be reordered or filtered.


generate uniqe key by using npm package

============================================================================

Styling React Components
=========================
1. CSS Stylesheets
2. Inline styling
3. CSS Modules
4. CSS in JS Libraries (Styled Components)

============================================================================


Lifecycle Methods
=========================
1. Mounting - When an instance of a component is being created and inserted into the DOM
2. Updating - When a component is being re-rendered as a result of chnages to either its props or state
3. Unmounting - When a component is being removed from the DOM
4. Error Handling - When there is an error during rendering, in a lifecycle method, or in the constructor of any child component

=============================================================================
Component - parts of the user interface
5 components - header, sidnav, footer, main content and root(App) 

Components are reusable
Component can contain other component

Functional Component
Class Component
  Class extending Component class of React library
  rendor method returns HTML , it must be there
  more complex application more number of components
  
Facebook has more than 30K components

Components are building block of React application

default export - name of component can be change while importing in other component
export - name can't be changed

Functional vs Class components
==============================
Functional :- 
  Simple functions
  Use functional components as much as possible
  Absence of 'this' keyword
  Solution without using state
  Mainly responsible for the UI
  Stateless/ Dumb/ Presentational
  
  Class :-
  ===============
  More feature rich
  Maintain their own private data - state
  Complex UI logic
  Provide lifecycle hooks
  Stateful/ Smart/ Container
  

Lifecycle Methods :-
=============================
constructor(props) - get called whenever a new component is created
                     initializing state
                     Binding the event handlers
                     
 static getDerivedStateFromProps(props, state) - When the state of the component depends on changes in props over time
                                                 doesn't have this keyword
                                                 Method is called everytime a component is re-rendered

render() - Only required method
           Read props & state and return JSX
           Do not change state or interact with DOM or make ajax calls
           Children components  life cycle methods are also executed
           
componentDidMount() - Invoked immediately after a compoent and all its children components have been rendered to the DOM
                      Causes side effects. Ex. Interact with the dOM or perform any ajaz calls to load data.
                      

==========================================================================================================================

constructor - Good place to do onetime setup

render - Avoid doing anything besides returning JSX

componentDidMount - Good place to do data loading

componentDidUpdate - Good place to do more data-loading when state/props change

componentWillUnmount - Good place to do cleanup (especially for non-React stuff)
                      



